initialize(){
	setwd('/Users/jacobsen/Desktop/Clunio_modeling/ClocksEvol_Lunar_nonWF');
	defineConstant('params','Sd_0.9_Cw_0.25');	
	
	// Setting constants, variables from command line	
	// Evolutionary params	
	defineConstant('pop_size',10);
	defineConstant('mu',1e-7);
	defineConstant('r',1e-7);
	// Genome architecture
	defineConstant('lunar_qtl_effect_sd',0.5);
	defineConstant('lunar_qtl_proportion',0.1);
	// Phenotype randomness 
	defineConstant('day_sd',0.25);
	// Interaction parameters
	defineConstant('day_mating_interaction_sd', 0.0000001);
	// Initial states
	defineConstant('initial_x',15);
	defineConstant('initial_y',0);
	// Carrying capacity
	defineConstant('K',200);
	
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality='xy', periodicity='x');
	initializeSex('A');	
	
	initializeMutationRate(mu);
	initializeMutationType('m1',0.5,'f',0.0); //neutral
	initializeMutationType('m2',0.5,'n',0.0, lunar_qtl_effect_sd); //circalunar
	
	m2.convertToSubstitution = F;
	m2.color = "green";
	
	initializeGenomicElementType('g1', c(m1,m2), c(1.0,lunar_qtl_proportion));
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(r);
	
	initializeInteractionType(1,'x',reciprocal=T, maxDistance=day_mating_interaction_sd);
	i1.setInteractionFunction('f',1.0);
	
	initializeInteractionType(2,'y',reciprocal=T, maxDistance=comp_sd*3);
	i2.setInteractionFunction('n',1.0,comp_sd);
}

mutationEffect(m2) {return 1.0;}

1 first() {
	sim.addSubpop("p1", pop_size);
	p1.setSpatialBounds(c(0,-1.5,30,1.5));
	
	init_pos = c();
	for (i in seq(0,pop_size - 1,1)) {
		init_pos = c(init_pos,c(asInteger(rnorm(1,initial_x,1)),rnorm(1,initial_y,0.05)));
	}
	p1.individuals.setSpatialPosition(init_pos);
}

first(){
	// emergence according to genotype
	inds = sim.subpopulations.individuals;
	days = floor(inds.sumOfMutationsOfType(m2) + rnorm(length(inds),0,day_sd)) + initial_x;
	inds.x = days;
	depths = ((sin(2*PI*(days/15) - 5))/2 - 0.5);
	inds.y = depths;
	inds.setSpatialPosition(p1.pointPeriodic(inds.spatialPosition));
	i1.evaluate(p1);	
}

reproduction(NULL, 'F'){
	inds = sim.subpopulations.individuals;
	inds.tag = asInteger(i1.strength(individual));
	possible_mates = p1.subsetIndividuals(sex = 'M',tag = 1);
	if (length(possible_mates) > 0){
		father = sample(possible_mates,1);
		mean_fit = mean(c(individual.fitnessScaling,father.fitnessScaling))*10;
   	clutchSize = asInteger(mean_fit);
   	for (j in seqLen(clutchSize)){
   		offspring = p1.addCrossed(individual,father);
    		offspring.y = individual.y;
	   	
	   }
   }
}

early(){
	inds = sim.subpopulations.individuals;	
	// killing adults
	ages = inds.age;
	inds.fitnessScaling = 1-ages;
	// random dispersal
	inds.y = inds.y + rnorm(length(inds),0,larval_dispersal);
}

late(){
	i2.evaluate(p1);
	inds = sim.subpopulations.individuals;	
	// selection due to competition		
	strengths = i2.totalOfNeighborStrengths(inds);
	// competition = 1 - (strengths/K);
	competition = K/(exp(10*strengths/K) + K);
	// selection due to environment
	y = inds.y;
	// Sigmoid Fitness	
	fitness_depth = 1/(2+exp(6*y + 1)) + 0.5;
	// total fitness
	inds.fitnessScaling = competition * fitness_depth;
}


100 late(){
	inds = sim.subpopulations.individuals;
	sample = sample(inds,100);
	sample.genomes.outputVCF(filePath = paste('vcfs/gen100_',params,'.vcf',sep = '')); 		
}
300 late(){
	inds = sim.subpopulations.individuals;
	sample = sample(inds,100);
	sample.genomes.outputVCF(filePath = paste('vcfs/gen300_',params,'.vcf',sep = '')); 		
}
500 late(){
	inds = sim.subpopulations.individuals;
	sample = sample(inds,100);
	sample.genomes.outputVCF(filePath = paste('vcfs/gen500_',params,'.vcf',sep = '')); 		
}
700 late(){
	inds = sim.subpopulations.individuals;
	sample = sample(inds,100);
	sample.genomes.outputVCF(filePath = paste('vcfs/gen700_',params,'.vcf',sep = '')); 		
}
900 late(){
	inds = sim.subpopulations.individuals;
	sample = sample(inds,100);
	sample.genomes.outputVCF(filePath = paste('vcfs/gen900_',params,'.vcf',sep = '')); 		
}
1100 late(){
	inds = sim.subpopulations.individuals;
	sample = sample(inds,100);
	sample.genomes.outputVCF(filePath = paste('vcfs/gen1100_',params,'.vcf',sep = '')); 		
}
1300 late(){
	inds = sim.subpopulations.individuals;
	sample = sample(inds,100);
	sample.genomes.outputVCF(filePath = paste('vcfs/gen1300_',params,'.vcf',sep = '')); 		
}
1500 late(){
	inds = sim.subpopulations.individuals;
	sample = sample(inds,100);
	sample.genomes.outputVCF(filePath = paste('vcfs/gen1500_',params,'.vcf',sep = '')); 		
}



