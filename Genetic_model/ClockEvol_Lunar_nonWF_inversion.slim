initialize(){
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality='xy', periodicity='x');
	initializeSex('A');	
	
	initializeMutationRate(mu);
	initializeMutationType('m1',0.5,'f',0.0); //neutral
	initializeMutationType('m2',0.5,'n',0.0, lunar_qtl_effect_sd); //circalunar
	
	m2.convertToSubstitution = F;

	//Inversion
	defineConstant("INV_START", 33333);
	defineConstant("INV_END", 66666);
	initializeMutationType("m3", 0.5, "f", 0.0);  // start marker
	m3.convertToSubstitution = T;
	
	initializeGenomicElementType('g1', c(m1,m2), c(1.0,lunar_qtl_proportion));
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(r);
	
	initializeInteractionType(1,'x',reciprocal=T, maxDistance=day_mating_interaction_sd);
	i1.setInteractionFunction('f',1.0);
	
	initializeInteractionType(2,'y',reciprocal=T, maxDistance=comp_sd*3);
	i2.setInteractionFunction('n',1.0,comp_sd);

}

mutationEffect(m2) {return 1.0;}

1 first() {
	sim.addSubpop("p1", pop_size);
	p1.setSpatialBounds(c(0,-1.5,30,1.5));
	
	init_pos = c();
	for (i in seq(0,pop_size - 1,1)) {
		init_pos = c(init_pos,c(asInteger(rnorm(1,initial_x,1)),rnorm(1,initial_y,0.05)));
	}
	p1.individuals.setSpatialPosition(init_pos);
	
	community.rescheduleScriptBlock(s1, end=total_gens);
}

first(){
	// emergence according to genotype
	inds = sim.subpopulations.individuals;
	days = floor(inds.sumOfMutationsOfType(m2) + rnorm(length(inds),0,day_sd)) + initial_x;
	inds.x = days;
	depths = ((sin(2*PI*(days/15) - 5))/2 - 0.5);
	inds.y = depths;
	inds.setSpatialPosition(p1.pointPeriodic(inds.spatialPosition));
	i1.evaluate(p1);	
}

500 first(){
	if (inversion == 1){
		inverted = sample(p1.genomes, 1);
		inverted.addNewDrawnMutation(m3, INV_START);
	}
}

reproduction(NULL, 'F'){
	inds = sim.subpopulations.individuals;
	inds.tag = asInteger(i1.strength(individual));
	possible_mates = p1.subsetIndividuals(sex = 'M',tag = 1);
	if (length(possible_mates) > 0){
		father = sample(possible_mates,1);
		if ((individual.countOfMutationsOfType(m3) > 0 | father.countOfMutationsOfType(m3) > 0) & sim.cycle == 500){
			clutchSize = 2000;
			for (j in seqLen(clutchSize)){
				offspring = p1.addCrossed(individual,father);
				offspring.y = runif(1,min = -1, max = 0);
			}
		}
		else {
			mean_fit = mean(c(individual.fitnessScaling,father.fitnessScaling))*10;
	   	clutchSize = asInteger(mean_fit) + 1;
	   	for (j in seqLen(clutchSize)){
	   		offspring = p1.addCrossed(individual,father);
	    		offspring.y = individual.y;
	   	}
	   }
   }
}

recombination() {
	gm1 = genome1.containsMarkerMutation(m3, INV_START);
	gm2 = genome2.containsMarkerMutation(m3, INV_START);
	if (!(gm1 | gm2)) {
		// homozygote non-inverted
		return F;
	}
	inInv = (breakpoints > INV_START) & (breakpoints <= INV_END);
	if (sum(inInv) % 2 == 0) {
		return F;
	}
	if (gm1 & gm2) {
		// homozygote inverted
		left = (breakpoints == INV_START);
		right = (breakpoints == INV_END + 1);
		breakpoints = sort(c(breakpoints[!(left | right)],
			c(INV_START, INV_END + 1)[c(sum(left) == 0, sum(right) == 0)]));
		return T;
	} else {
		// heterozygote inverted: resample to get an even number of breakpoints
		// this is *recursive*: it calls this recombination callback again!
		breakpoints = sim.chromosome.drawBreakpoints(individual);
	}
	return T;
}

early(){
	inds = sim.subpopulations.individuals;	
	// killing adults
	ages = inds.age;
	inds.fitnessScaling = 1-ages;
	// random dispersal
	inds.y = inds.y + rnorm(length(inds),0,larval_dispersal);
}

late(){
	i2.evaluate(p1);
	inds = sim.subpopulations.individuals;	
	// selection due to competition		
	strengths = i2.totalOfNeighborStrengths(inds);
	// competition = 1 - (strengths/K);
	competition = K/(exp(10*strengths/K) + K);
	// selection due to environment
	y = inds.y;
	fitness_depth = 1/(2+exp(6*y + 1)) + 0.5;
	// total fitness
	inds.fitnessScaling = competition * fitness_depth;
}

late(){
	if (sim.cycle % 5 == 0){
		inds = sim.subpopulations.individuals;
		catn(inds.x,sep=',');
		catn(inds.y,sep=',');
		catn(sim.mutationFrequencies(p1),sep=',');
		muts = sim.mutationFrequencies(p1, mutations = sim.mutationsOfType(m3));		
		if (length(muts) == 0){catn(0.0);}
		else {catn(muts);}
	}
}

s1 late(){}